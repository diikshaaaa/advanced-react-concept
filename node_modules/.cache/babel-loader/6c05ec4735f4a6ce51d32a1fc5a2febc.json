{"ast":null,"code":"var _jsxFileName = \"D:\\\\github_repos\\\\react\\\\advanced-react-concept\\\\src\\\\tutorial\\\\6-useReducer\\\\1-todo.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialTodos = [{\n  id: 1,\n  title: \"Todo 1\",\n  complete: false\n}, {\n  id: 2,\n  title: \"Todo 2\",\n  complete: false\n}];\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"COMPLETE\":\n      return state.map(todo => {\n        if (todo.id === action.id) {\n          return { ...todo,\n            complete: !todo.complete\n          };\n        } else {\n          return todo;\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nfunction Todos() {\n  _s();\n\n  const [todos, dispatch] = useReducer(reducer, initialTodos);\n\n  const handleComplete = todo => {\n    dispatch({\n      type: \"COMPLETE\",\n      id: todo.id\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: todo.complete,\n          onChange: () => handleComplete(todo)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), todo.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n\n_s(Todos, \"u4TrVHogQ4fo59FxNWf+bVaAFRg=\");\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["D:/github_repos/react/advanced-react-concept/src/tutorial/6-useReducer/1-todo.js"],"names":["useReducer","initialTodos","id","title","complete","reducer","state","action","type","map","todo","Todos","todos","dispatch","handleComplete"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;;;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,KAAK,EAAE,QAFT;AAGEC,EAAAA,QAAQ,EAAE;AAHZ,CADmB,EAMnB;AACEF,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,KAAK,EAAE,QAFT;AAGEC,EAAAA,QAAQ,EAAE;AAHZ,CANmB,CAArB;;AAaA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAOF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU;AACzB,YAAIA,IAAI,CAACR,EAAL,KAAYK,MAAM,CAACL,EAAvB,EAA2B;AACzB,iBAAO,EAAE,GAAGQ,IAAL;AAAWN,YAAAA,QAAQ,EAAE,CAACM,IAAI,CAACN;AAA3B,WAAP;AACD,SAFD,MAEO;AACL,iBAAOM,IAAP;AACD;AACF,OANM,CAAP;;AAOF;AACE,aAAOJ,KAAP;AAVJ;AAYD,CAbD;;AAeA,SAASK,KAAT,GAAiB;AAAA;;AACf,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,UAAU,CAACK,OAAD,EAAUJ,YAAV,CAApC;;AAEA,QAAMa,cAAc,GAAIJ,IAAD,IAAU;AAC/BG,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAE,UAAR;AAAoBN,MAAAA,EAAE,EAAEQ,IAAI,CAACR;AAA7B,KAAD,CAAR;AACD,GAFD;;AAIA,sBACE;AAAA,cACGU,KAAK,CAACH,GAAN,CAAWC,IAAD,iBACT;AAAA,6BACE;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,OAAO,EAAEA,IAAI,CAACN,QAFhB;AAGE,UAAA,QAAQ,EAAE,MAAMU,cAAc,CAACJ,IAAD;AAHhC;AAAA;AAAA;AAAA;AAAA,gBADF,EAMGA,IAAI,CAACP,KANR;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,OAAUO,IAAI,CAACR,EAAf;AAAA;AAAA;AAAA;AAAA,YADD;AADH,mBADF;AAgBD;;GAvBQS,K;;KAAAA,K;AAyBT,eAAeA,KAAf","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nconst initialTodos = [\r\n  {\r\n    id: 1,\r\n    title: \"Todo 1\",\r\n    complete: false,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Todo 2\",\r\n    complete: false,\r\n  },\r\n];\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"COMPLETE\":\r\n      return state.map((todo) => {\r\n        if (todo.id === action.id) {\r\n          return { ...todo, complete: !todo.complete };\r\n        } else {\r\n          return todo;\r\n        }\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction Todos() {\r\n  const [todos, dispatch] = useReducer(reducer, initialTodos);\r\n\r\n  const handleComplete = (todo) => {\r\n    dispatch({ type: \"COMPLETE\", id: todo.id });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {todos.map((todo) => (\r\n        <div key={todo.id}>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={todo.complete}\r\n              onChange={() => handleComplete(todo)}\r\n            />\r\n            {todo.title}\r\n          </label>\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todos;"]},"metadata":{},"sourceType":"module"}