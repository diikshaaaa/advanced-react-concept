{"ast":null,"code":"var _jsxFileName = \"D:\\\\github_repos\\\\react\\\\advanced-react-concept\\\\src\\\\tutorial\\\\3-conditional-rendering\\\\1-mutiple-returns.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = 'https://api.github.com/users/QuincyLarson';\n\nconst MultipleReturns = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(true);\n  const [user, setUser] = useState('default user');\n  useEffect(() => {\n    fetch(url).then(resp => {\n      // A promise is something that will be either resolved or rejected at a later point in time (typically**). then is used to hook up a handler that will be called when the promise is resolved (and optionally when it's rejected, if you pass a second function into then; otherwise you'd use catch).\n      if (resp.status >= 200 && resp.status <= 299) {\n        return resp.json();\n      } else {\n        setIsLoading(false);\n        setIsError(true);\n        throw new Error(resp.statusText);\n      }\n    }).then(user => {\n      const {\n        login\n      } = user;\n      setUser(login);\n      setIsLoading(false);\n    }).catch(error => console.log(error));\n  }, []);\n\n  if (isLoading) {\n    // if isLoading is true then show \"Loading...\" \n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (isError) {\n    // if isError is true then show \"Error...\"\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Error....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MultipleReturns, \"AQqf6safy3Ta2n+b635FvWibdjY=\");\n\n_c = MultipleReturns;\nexport default MultipleReturns;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultipleReturns\");","map":{"version":3,"sources":["D:/github_repos/react/advanced-react-concept/src/tutorial/3-conditional-rendering/1-mutiple-returns.js"],"names":["React","useState","useEffect","url","MultipleReturns","isLoading","setIsLoading","isError","setIsError","user","setUser","fetch","then","resp","status","json","Error","statusText","login","catch","error","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AACA,MAAMC,GAAG,GAAG,2CAAZ;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,cAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,KAAK,CAACR,GAAD,CAAL,CACGS,IADH,CACSC,IAAD,IAAU;AACd;AACA,UAAIA,IAAI,CAACC,MAAL,IAAe,GAAf,IAAsBD,IAAI,CAACC,MAAL,IAAe,GAAzC,EAA8C;AAC5C,eAAOD,IAAI,CAACE,IAAL,EAAP;AACD,OAFD,MAEO;AACLT,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAM,IAAIQ,KAAJ,CAAUH,IAAI,CAACI,UAAf,CAAN;AACD;AACF,KAVH,EAWGL,IAXH,CAWSH,IAAD,IAAU;AACd,YAAM;AAAES,QAAAA;AAAF,UAAYT,IAAlB;AACAC,MAAAA,OAAO,CAACQ,KAAD,CAAP;AACAZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAfH,EAgBGa,KAhBH,CAgBUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAhBpB;AAiBD,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,MAAIf,SAAJ,EAAe;AACf;AACE,wBACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,MAAIE,OAAJ,EAAa;AACb;AACE,wBACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,sBACE;AAAA,2BACE;AAAA,gBAAKE;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA9CD;;GAAML,e;;KAAAA,e;AAgDN,eAAeA,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nconst url = 'https://api.github.com/users/QuincyLarson';\r\n\r\nconst MultipleReturns = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isError, setIsError] = useState(true);\r\n  const [user, setUser] = useState('default user');\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((resp) => {\r\n        // A promise is something that will be either resolved or rejected at a later point in time (typically**). then is used to hook up a handler that will be called when the promise is resolved (and optionally when it's rejected, if you pass a second function into then; otherwise you'd use catch).\r\n        if (resp.status >= 200 && resp.status <= 299) {\r\n          return resp.json();\r\n        } else {\r\n          setIsLoading(false);\r\n          setIsError(true);\r\n          throw new Error(resp.statusText);\r\n        }\r\n      })\r\n      .then((user) => {\r\n        const { login } = user;\r\n        setUser(login);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n  // if isLoading is true then show \"Loading...\" \r\n    return (\r\n      <div>\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    );\r\n  }\r\n  if (isError) {\r\n  // if isError is true then show \"Error...\"\r\n    return (\r\n      <div>\r\n        <h1>Error....</h1>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>{user}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultipleReturns;"]},"metadata":{},"sourceType":"module"}